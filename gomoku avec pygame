import numpy as np
import pygame

pygame.init()

nbr_squares = 15
l_square = 60
l_edge = 25
l_heading = 95
r_pawn = 20
l_board = (nbr_squares - 1) * l_square + 2 * l_edge
h_board = (nbr_squares - 1) * l_square + l_heading + l_edge
beige = (241, 188, 105)

board = np.zeros((nbr_squares, nbr_squares), dtype=np.byte)
surface = pygame.display.set_mode((l_board, h_board))
pygame.display.set_caption('Gomoku')
font = pygame.font.Font('freesansbold.ttf', 33)
player = 1
game = True
run = True
end = False


def victory(current_board, last_move_played):
    x = last_move_played[0]
    y = last_move_played[1]
    for i in range(x - 4, x + 1):
        if i < 0:
            continue
        if i <= nbr_squares - 5:
            if 0 != current_board[i, y] == current_board[i + 1, y] == current_board[i + 2, y] == current_board[i + 3, y] == current_board[i + 4, y]:
                if variant == 'Freestyle':
                    return True
                elif i == 0:  # la suite commence en haut
                    if current_board[i + 5, y] != current_board[i, y]:
                        return True
                elif i == nbr_squares - 5:  # la suite finit en bas
                    if current_board[i - 1, y] != current_board[i, y]:
                        return True
                elif current_board[i + 5, y] != current_board[i, y] != current_board[i - 1, y]:
                    return True
    for j in range(y - 4, y + 1):
        if j < 0:
            continue
        if j <= nbr_squares - 5:
            if 0 != current_board[x, j] == current_board[x, j + 1] == current_board[x, j + 2] == current_board[x, j + 3] == current_board[x, j + 4]:
                if variant == 'Freestyle':
                    return True
                elif j == 0:  # cas la suite commence à gauche
                    if current_board[x, j + 5] != current_board[x, j]:
                        return True
                elif j == nbr_squares - 5:  # la suite finit a droite
                    if current_board[x, j - 1] != current_board[x, j]:
                        return True
                elif current_board[x, j + 5] != current_board[x, j] != current_board[x, j - 1]:
                    return True
    for k in range(5):
        i = x - k
        j = y - k
        if i < 0 or j < 0:
            continue
        if i <= nbr_squares - 5 and j <= nbr_squares - 5:
            if 0 != current_board[i, j] == current_board[i + 1, j + 1] == current_board[i + 2, j + 2] == current_board[i + 3, j + 3] == current_board[i + 4, j + 4]:
                if variant == 'Freestyle':
                    return True
                elif (i == nbr_squares - 5 and j == 0) or (i == 0 and j == nbr_squares - 5):  # la diagonale en bas a gauche ou en haut a droite
                    return True
                elif i == 0 or j == 0:  # la diagonale commence en haut ou a gauche
                    if current_board[i + 5, j + 5] != current_board[i + 4, j + 4]:
                        return True
                elif i == nbr_squares - 5 or j == nbr_squares - 5:  # la diagonale finit en bas ou a droite
                    if current_board[i - 1, j - 1] != current_board[i, j]:
                        return True
                elif current_board[i + 5, j + 5] != current_board[i + 4, j + 4] != current_board[i - 1, j - 1]:
                    return True
    for k in range(5):
        i = x - 4 + k
        j = y - k
        if i < 0 or j < 0:
            continue
        if i <= nbr_squares - 5 and j <= nbr_squares - 5:
            if 0 != current_board[i + 4, j] == current_board[i + 3, j + 1] == current_board[i + 2, j + 2] == current_board[i + 1, j + 3] == current_board[i, j + 4]:
                if variant == 'Freestyle':
                    return True
                elif (i == 0 and j == 0) or (i == nbr_squares - 5 and j == nbr_squares - 5):  # la diagonale en haut a gauche ou en bas a droite
                    return True
                elif j == 0 or i == nbr_squares - 5:  # la diagonale commence en bas ou a gauche
                    if current_board[i - 1, j + 5] != current_board[i, j + 4]:
                        return True
                elif i == 0 or j == nbr_squares - 5:  # la diagonale finit en haut ou a droite
                    if current_board[i + 5, j - 1] != current_board[i + 4, j]:
                        return True
                elif current_board[i + 5, j - 1] != current_board[i + 4, j] != current_board[i - 1, j + 5]:
                    return True
    return False


def draw_board():
    surface.fill(beige)
    for i in range(nbr_squares):
        pygame.draw.line(surface, (0, 0, 0), (l_square * i + l_edge, l_heading),
                         (l_square * i + l_edge, h_board - l_edge))  # verticales
    for i in range(nbr_squares):
        pygame.draw.line(surface, (0, 0, 0), (l_edge, l_square * i + l_heading),
                         (l_board - l_edge, l_square * i + l_heading))  # horizontales


def display(sentence):
    text = font.render(sentence, True, (0, 0, 0), beige)
    surface.fill(beige, (0, 0, l_board, l_heading - l_square // 2))
    text_rect = text.get_rect()
    text_rect.center = (l_board // 2, l_heading // 2)
    surface.blit(text, text_rect)


def mouse_in_board():
    if position[0] < l_edge - l_square // 2:
        return False
    elif position[0] > l_board - l_edge + l_square // 2:
        return False
    elif position[1] < l_heading - l_square // 2:
        return False
    elif position[1] > h_board - l_edge + l_square // 2:
        return False
    return True


def draw_pawn(current_player, current_coordinates):
    if current_player == 1:
        pygame.draw.circle(surface, (0, 0, 0), (current_coordinates[1] * l_square + l_edge, current_coordinates[0] * l_square + l_heading), r_pawn, r_pawn)
    else:
        pygame.draw.circle(surface, (255, 255, 255), (current_coordinates[1] * l_square + l_edge, current_coordinates[0] * l_square + l_heading), r_pawn, r_pawn)

           
while True:
    board = np.zeros((nbr_squares, nbr_squares), dtype=np.byte)
    draw_board()
    display('Tour aux Noirs')
    run = True
    game = True
    player = 1
    while run:
        pygame.display.flip()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                end = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    run = False
                if event.type == pygame.MOUSEBUTTONDOWN:
                    if game:
                        if pygame.mouse.get_pressed() == (1, 0, 0):
                            position = pygame.mouse.get_pos()
                            if not mouse_in_board():
                                continue
                            coordinates = ((position[1] - l_heading + l_square // 2) // l_square, (position[0] - l_edge + l_square // 2) // l_square)
                            if board[coordinates] == 0:
                                board[coordinates] = player
                                draw_pawn(player, coordinates)
                                if victory(board, coordinates):
                                    if player == 1:
                                        display('Les Noirs ont gagné!')
                                    else:
                                        display('Les Blancs ont gagné!')
                                    game = False
                                    continue
                                elif 0 not in board:
                                    display('Nulle!')
                                    game = False
                                    continue
                                player *= -1
                                if player == -1:
                                    display('Tour aux Blancs')
                                else:
                                    display('Tour aux Noirs')
    if end:
        break

pygame.quit()

